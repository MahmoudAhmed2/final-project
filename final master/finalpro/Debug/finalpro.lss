
finalpro.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002ec  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000ae  00800060  000002ec  00000360  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000040e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000440  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000088  00000000  00000000  0000047c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000d21  00000000  00000000  00000504  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000754  00000000  00000000  00001225  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000005e2  00000000  00000000  00001979  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000ec  00000000  00000000  00001f5c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000048c  00000000  00000000  00002048  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000003d3  00000000  00000000  000024d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000058  00000000  00000000  000028a7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	11 e0       	ldi	r17, 0x01	; 1
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec ee       	ldi	r30, 0xEC	; 236
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ae 30       	cpi	r26, 0x0E	; 14
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	21 e0       	ldi	r18, 0x01	; 1
  78:	ae e0       	ldi	r26, 0x0E	; 14
  7a:	b1 e0       	ldi	r27, 0x01	; 1
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ae 30       	cpi	r26, 0x0E	; 14
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 74 01 	jmp	0x2e8	; 0x2e8 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
#include <avr/io.h>

int main(void)
{
  
  SPI_INIT_MASTER();
  92:	0e 94 06 01 	call	0x20c	; 0x20c <SPI_INIT_MASTER>
  UART_vInit(9600);
  96:	60 e8       	ldi	r22, 0x80	; 128
  98:	75 e2       	ldi	r23, 0x25	; 37
  9a:	80 e0       	ldi	r24, 0x00	; 0
  9c:	90 e0       	ldi	r25, 0x00	; 0
  9e:	0e 94 15 01 	call	0x22a	; 0x22a <UART_vInit>
  char *string7="lamp 1 is off\r";
  char *string8="lamp 2 is off \r";
  char *string9="lamp 3 is off \r";
  char *string10="lamp 4 is off \r";
  char *string11="last action:";
  usart_string_transmit(string1);
  a2:	80 e6       	ldi	r24, 0x60	; 96
  a4:	90 e0       	ldi	r25, 0x00	; 0
  a6:	0e 94 43 01 	call	0x286	; 0x286 <usart_string_transmit>
  usart_string_transmit(string2);
  aa:	8a e6       	ldi	r24, 0x6A	; 106
  ac:	90 e0       	ldi	r25, 0x00	; 0
  ae:	0e 94 43 01 	call	0x286	; 0x286 <usart_string_transmit>
  uint8 a=0,b=0,c=0,d=0;
  b2:	e1 2c       	mov	r14, r1
  b4:	f1 2c       	mov	r15, r1
  b6:	00 e0       	ldi	r16, 0x00	; 0
  b8:	10 e0       	ldi	r17, 0x00	; 0
			}
			else{
				usart_string_transmit(string11);
				usart_string_transmit(string8);
				usart_string_transmit(string2);
				b=0;
  ba:	d0 e0       	ldi	r29, 0x00	; 0
				a=0;
			}
			break;
			case '2':
			UART_vtransmit(12);
			b++;
  bc:	dd 24       	eor	r13, r13
  be:	d3 94       	inc	r13
  usart_string_transmit(string2);
  uint8 a=0,b=0,c=0,d=0;
    while (1) 
    {
		
		data=UART_Vreceive();
  c0:	0e 94 3f 01 	call	0x27e	; 0x27e <UART_Vreceive>
  c4:	c8 2f       	mov	r28, r24
		if(!data){
  c6:	81 11       	cpse	r24, r1
  c8:	04 c0       	rjmp	.+8      	; 0xd2 <main+0x40>
		UART_vtransmit(12);
  ca:	8c e0       	ldi	r24, 0x0C	; 12
  cc:	0e 94 3b 01 	call	0x276	; 0x276 <UART_vtransmit>
  d0:	90 c0       	rjmp	.+288    	; 0x1f2 <main+0x160>
		}
		switch(data)
  d2:	82 33       	cpi	r24, 0x32	; 50
  d4:	61 f1       	breq	.+88     	; 0x12e <main+0x9c>
  d6:	18 f4       	brcc	.+6      	; 0xde <main+0x4c>
  d8:	81 33       	cpi	r24, 0x31	; 49
  da:	41 f0       	breq	.+16     	; 0xec <main+0x5a>
  dc:	8a c0       	rjmp	.+276    	; 0x1f2 <main+0x160>
  de:	83 33       	cpi	r24, 0x33	; 51
  e0:	09 f4       	brne	.+2      	; 0xe4 <main+0x52>
  e2:	46 c0       	rjmp	.+140    	; 0x170 <main+0xde>
  e4:	84 33       	cpi	r24, 0x34	; 52
  e6:	09 f4       	brne	.+2      	; 0xea <main+0x58>
  e8:	64 c0       	rjmp	.+200    	; 0x1b2 <main+0x120>
  ea:	83 c0       	rjmp	.+262    	; 0x1f2 <main+0x160>
		{
			case '1':
			UART_vtransmit(12);
  ec:	8c e0       	ldi	r24, 0x0C	; 12
  ee:	0e 94 3b 01 	call	0x276	; 0x276 <UART_vtransmit>
			a++;
			if(a==1){
  f2:	11 11       	cpse	r17, r1
  f4:	0e c0       	rjmp	.+28     	; 0x112 <main+0x80>
			usart_string_transmit(string11);
  f6:	86 e8       	ldi	r24, 0x86	; 134
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	0e 94 43 01 	call	0x286	; 0x286 <usart_string_transmit>
			usart_string_transmit(string3);
  fe:	83 e9       	ldi	r24, 0x93	; 147
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	0e 94 43 01 	call	0x286	; 0x286 <usart_string_transmit>
			usart_string_transmit(string2);
 106:	8a e6       	ldi	r24, 0x6A	; 106
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	0e 94 43 01 	call	0x286	; 0x286 <usart_string_transmit>
		}
		switch(data)
		{
			case '1':
			UART_vtransmit(12);
			a++;
 10e:	1d 2d       	mov	r17, r13
 110:	70 c0       	rjmp	.+224    	; 0x1f2 <main+0x160>
			usart_string_transmit(string11);
			usart_string_transmit(string3);
			usart_string_transmit(string2);
			}
			else{
				usart_string_transmit(string11);
 112:	86 e8       	ldi	r24, 0x86	; 134
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	0e 94 43 01 	call	0x286	; 0x286 <usart_string_transmit>
				usart_string_transmit(string7);
 11a:	82 ea       	ldi	r24, 0xA2	; 162
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	0e 94 43 01 	call	0x286	; 0x286 <usart_string_transmit>
				usart_string_transmit(string2);
 122:	8a e6       	ldi	r24, 0x6A	; 106
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	0e 94 43 01 	call	0x286	; 0x286 <usart_string_transmit>
				a=0;
 12a:	1d 2f       	mov	r17, r29
 12c:	62 c0       	rjmp	.+196    	; 0x1f2 <main+0x160>
			}
			break;
			case '2':
			UART_vtransmit(12);
 12e:	8c e0       	ldi	r24, 0x0C	; 12
 130:	0e 94 3b 01 	call	0x276	; 0x276 <UART_vtransmit>
			b++;
			if(b==1){
 134:	01 11       	cpse	r16, r1
 136:	0e c0       	rjmp	.+28     	; 0x154 <main+0xc2>
				usart_string_transmit(string11);
 138:	86 e8       	ldi	r24, 0x86	; 134
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	0e 94 43 01 	call	0x286	; 0x286 <usart_string_transmit>
				usart_string_transmit(string4);
 140:	81 eb       	ldi	r24, 0xB1	; 177
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	0e 94 43 01 	call	0x286	; 0x286 <usart_string_transmit>
				usart_string_transmit(string2);
 148:	8a e6       	ldi	r24, 0x6A	; 106
 14a:	90 e0       	ldi	r25, 0x00	; 0
 14c:	0e 94 43 01 	call	0x286	; 0x286 <usart_string_transmit>
				a=0;
			}
			break;
			case '2':
			UART_vtransmit(12);
			b++;
 150:	0d 2d       	mov	r16, r13
 152:	4f c0       	rjmp	.+158    	; 0x1f2 <main+0x160>
				usart_string_transmit(string11);
				usart_string_transmit(string4);
				usart_string_transmit(string2);
			}
			else{
				usart_string_transmit(string11);
 154:	86 e8       	ldi	r24, 0x86	; 134
 156:	90 e0       	ldi	r25, 0x00	; 0
 158:	0e 94 43 01 	call	0x286	; 0x286 <usart_string_transmit>
				usart_string_transmit(string8);
 15c:	80 ec       	ldi	r24, 0xC0	; 192
 15e:	90 e0       	ldi	r25, 0x00	; 0
 160:	0e 94 43 01 	call	0x286	; 0x286 <usart_string_transmit>
				usart_string_transmit(string2);
 164:	8a e6       	ldi	r24, 0x6A	; 106
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	0e 94 43 01 	call	0x286	; 0x286 <usart_string_transmit>
				b=0;
 16c:	0d 2f       	mov	r16, r29
 16e:	41 c0       	rjmp	.+130    	; 0x1f2 <main+0x160>
			}
			break;
			case '3':
			UART_vtransmit(12);
 170:	8c e0       	ldi	r24, 0x0C	; 12
 172:	0e 94 3b 01 	call	0x276	; 0x276 <UART_vtransmit>
			c++;
			if(c==1){
 176:	f1 10       	cpse	r15, r1
 178:	0e c0       	rjmp	.+28     	; 0x196 <main+0x104>
				usart_string_transmit(string11);
 17a:	86 e8       	ldi	r24, 0x86	; 134
 17c:	90 e0       	ldi	r25, 0x00	; 0
 17e:	0e 94 43 01 	call	0x286	; 0x286 <usart_string_transmit>
				usart_string_transmit(string5);
 182:	80 ed       	ldi	r24, 0xD0	; 208
 184:	90 e0       	ldi	r25, 0x00	; 0
 186:	0e 94 43 01 	call	0x286	; 0x286 <usart_string_transmit>
				usart_string_transmit(string2);
 18a:	8a e6       	ldi	r24, 0x6A	; 106
 18c:	90 e0       	ldi	r25, 0x00	; 0
 18e:	0e 94 43 01 	call	0x286	; 0x286 <usart_string_transmit>
				b=0;
			}
			break;
			case '3':
			UART_vtransmit(12);
			c++;
 192:	fd 2c       	mov	r15, r13
 194:	2e c0       	rjmp	.+92     	; 0x1f2 <main+0x160>
				usart_string_transmit(string11);
				usart_string_transmit(string5);
				usart_string_transmit(string2);
			}
			else{
				usart_string_transmit(string11);
 196:	86 e8       	ldi	r24, 0x86	; 134
 198:	90 e0       	ldi	r25, 0x00	; 0
 19a:	0e 94 43 01 	call	0x286	; 0x286 <usart_string_transmit>
				usart_string_transmit(string9);
 19e:	8f ed       	ldi	r24, 0xDF	; 223
 1a0:	90 e0       	ldi	r25, 0x00	; 0
 1a2:	0e 94 43 01 	call	0x286	; 0x286 <usart_string_transmit>
				usart_string_transmit(string2);
 1a6:	8a e6       	ldi	r24, 0x6A	; 106
 1a8:	90 e0       	ldi	r25, 0x00	; 0
 1aa:	0e 94 43 01 	call	0x286	; 0x286 <usart_string_transmit>
				c=0;
 1ae:	fd 2e       	mov	r15, r29
 1b0:	20 c0       	rjmp	.+64     	; 0x1f2 <main+0x160>
			}
			break;
			case '4':
			UART_vtransmit(12);
 1b2:	8c e0       	ldi	r24, 0x0C	; 12
 1b4:	0e 94 3b 01 	call	0x276	; 0x276 <UART_vtransmit>
			d++;
			if(d==1){
 1b8:	e1 10       	cpse	r14, r1
 1ba:	0e c0       	rjmp	.+28     	; 0x1d8 <main+0x146>
				usart_string_transmit(string11);
 1bc:	86 e8       	ldi	r24, 0x86	; 134
 1be:	90 e0       	ldi	r25, 0x00	; 0
 1c0:	0e 94 43 01 	call	0x286	; 0x286 <usart_string_transmit>
				usart_string_transmit(string6);
 1c4:	8f ee       	ldi	r24, 0xEF	; 239
 1c6:	90 e0       	ldi	r25, 0x00	; 0
 1c8:	0e 94 43 01 	call	0x286	; 0x286 <usart_string_transmit>
				usart_string_transmit(string2);
 1cc:	8a e6       	ldi	r24, 0x6A	; 106
 1ce:	90 e0       	ldi	r25, 0x00	; 0
 1d0:	0e 94 43 01 	call	0x286	; 0x286 <usart_string_transmit>
				c=0;
			}
			break;
			case '4':
			UART_vtransmit(12);
			d++;
 1d4:	ed 2c       	mov	r14, r13
 1d6:	0d c0       	rjmp	.+26     	; 0x1f2 <main+0x160>
				usart_string_transmit(string11);
				usart_string_transmit(string6);
				usart_string_transmit(string2);
			}
			else{
				usart_string_transmit(string11);
 1d8:	86 e8       	ldi	r24, 0x86	; 134
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	0e 94 43 01 	call	0x286	; 0x286 <usart_string_transmit>
				usart_string_transmit(string10);
 1e0:	8d ef       	ldi	r24, 0xFD	; 253
 1e2:	90 e0       	ldi	r25, 0x00	; 0
 1e4:	0e 94 43 01 	call	0x286	; 0x286 <usart_string_transmit>
				usart_string_transmit(string2);
 1e8:	8a e6       	ldi	r24, 0x6A	; 106
 1ea:	90 e0       	ldi	r25, 0x00	; 0
 1ec:	0e 94 43 01 	call	0x286	; 0x286 <usart_string_transmit>
				d=0;
 1f0:	ed 2e       	mov	r14, r29
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1f2:	2f ef       	ldi	r18, 0xFF	; 255
 1f4:	81 ee       	ldi	r24, 0xE1	; 225
 1f6:	94 e0       	ldi	r25, 0x04	; 4
 1f8:	21 50       	subi	r18, 0x01	; 1
 1fa:	80 40       	sbci	r24, 0x00	; 0
 1fc:	90 40       	sbci	r25, 0x00	; 0
 1fe:	e1 f7       	brne	.-8      	; 0x1f8 <main+0x166>
 200:	00 c0       	rjmp	.+0      	; 0x202 <main+0x170>
 202:	00 00       	nop
			}
			break;
		}
		
		_delay_ms(100);
		SPI_MASTER_TRANSMIT(data);
 204:	8c 2f       	mov	r24, r28
 206:	0e 94 0f 01 	call	0x21e	; 0x21e <SPI_MASTER_TRANSMIT>
    }
 20a:	5a cf       	rjmp	.-332    	; 0xc0 <main+0x2e>

0000020c <SPI_INIT_MASTER>:
 20c:	6c 9a       	sbi	0x0d, 4	; 13
 20e:	69 9a       	sbi	0x0d, 1	; 13
 210:	68 9a       	sbi	0x0d, 0	; 13
 212:	bd 9a       	sbi	0x17, 5	; 23
 214:	bf 9a       	sbi	0x17, 7	; 23
 216:	bc 9a       	sbi	0x17, 4	; 23
 218:	c4 9a       	sbi	0x18, 4	; 24
 21a:	6e 9a       	sbi	0x0d, 6	; 13
 21c:	08 95       	ret

0000021e <SPI_MASTER_TRANSMIT>:
 21e:	c4 98       	cbi	0x18, 4	; 24
 220:	8f b9       	out	0x0f, r24	; 15
 222:	77 9b       	sbis	0x0e, 7	; 14
 224:	fe cf       	rjmp	.-4      	; 0x222 <SPI_MASTER_TRANSMIT+0x4>
 226:	c4 9a       	sbi	0x18, 4	; 24
 228:	08 95       	ret

0000022a <UART_vInit>:
void UART_vInit(unsigned long baud)
{
	unsigned short ubrr;
		
	/*1 - Choose baud rate that will be used by sender and receiver by writing to UBRRL/UBRRH*/
	ubrr =  ( (CPU_FREQ/ (16*baud)) - 1);
 22a:	dc 01       	movw	r26, r24
 22c:	cb 01       	movw	r24, r22
 22e:	88 0f       	add	r24, r24
 230:	99 1f       	adc	r25, r25
 232:	aa 1f       	adc	r26, r26
 234:	bb 1f       	adc	r27, r27
 236:	88 0f       	add	r24, r24
 238:	99 1f       	adc	r25, r25
 23a:	aa 1f       	adc	r26, r26
 23c:	bb 1f       	adc	r27, r27
 23e:	9c 01       	movw	r18, r24
 240:	ad 01       	movw	r20, r26
 242:	22 0f       	add	r18, r18
 244:	33 1f       	adc	r19, r19
 246:	44 1f       	adc	r20, r20
 248:	55 1f       	adc	r21, r21
 24a:	22 0f       	add	r18, r18
 24c:	33 1f       	adc	r19, r19
 24e:	44 1f       	adc	r20, r20
 250:	55 1f       	adc	r21, r21
 252:	60 e0       	ldi	r22, 0x00	; 0
 254:	74 e2       	ldi	r23, 0x24	; 36
 256:	84 ef       	ldi	r24, 0xF4	; 244
 258:	90 e0       	ldi	r25, 0x00	; 0
 25a:	0e 94 52 01 	call	0x2a4	; 0x2a4 <__udivmodsi4>
 25e:	21 50       	subi	r18, 0x01	; 1
 260:	31 09       	sbc	r19, r1
		
	UBRRL = (char) ubrr;
 262:	29 b9       	out	0x09, r18	; 9
	UBRRH = (char) (ubrr >> 8);
 264:	30 bd       	out	0x20, r19	; 32
	
	/*3 - Choose number of data bits to be sent from UCSRC We will work with 8 bits.*/
	UCSRC = (1<<URSEL)|(1<<UCSZ0) | (1<<UCSZ1);
 266:	86 e8       	ldi	r24, 0x86	; 134
 268:	80 bd       	out	0x20, r24	; 32

	UCSRB = (1<<RXCIE);
 26a:	80 e8       	ldi	r24, 0x80	; 128
 26c:	8a b9       	out	0x0a, r24	; 10
	
	/*2 - Enable UART Sender & Receiver*/
	UCSRB |= (1<<TXEN) | (1<<RXEN);
 26e:	8a b1       	in	r24, 0x0a	; 10
 270:	88 61       	ori	r24, 0x18	; 24
 272:	8a b9       	out	0x0a, r24	; 10
 274:	08 95       	ret

00000276 <UART_vtransmit>:
}

void UART_vtransmit(unsigned char val)
{
	/*Wait for Transmit buffer to be empty*/
	while( (UCSRA & (1<<UDRE)) == 0 )
 276:	5d 9b       	sbis	0x0b, 5	; 11
 278:	fe cf       	rjmp	.-4      	; 0x276 <UART_vtransmit>
	{
		
	}
	
	/*Put data to transmit buffer*/
	UDR = val;
 27a:	8c b9       	out	0x0c, r24	; 12
 27c:	08 95       	ret

0000027e <UART_Vreceive>:
}
unsigned char UART_Vreceive(void)
{
	while(!((UCSRA) & (1<<RXC)));                  // wait while data is being received
 27e:	5f 9b       	sbis	0x0b, 7	; 11
 280:	fe cf       	rjmp	.-4      	; 0x27e <UART_Vreceive>
	return UDR;                                   // return 8-bit data
 282:	8c b1       	in	r24, 0x0c	; 12
}
 284:	08 95       	ret

00000286 <usart_string_transmit>:
/*The function is declared to transmit string.*/
void usart_string_transmit(char *string)
{
 286:	cf 93       	push	r28
 288:	df 93       	push	r29
 28a:	ec 01       	movw	r28, r24
	while(*string)
 28c:	88 81       	ld	r24, Y
 28e:	88 23       	and	r24, r24
 290:	31 f0       	breq	.+12     	; 0x29e <usart_string_transmit+0x18>
 292:	21 96       	adiw	r28, 0x01	; 1
	UART_vtransmit(*string++);
 294:	0e 94 3b 01 	call	0x276	; 0x276 <UART_vtransmit>
	return UDR;                                   // return 8-bit data
}
/*The function is declared to transmit string.*/
void usart_string_transmit(char *string)
{
	while(*string)
 298:	89 91       	ld	r24, Y+
 29a:	81 11       	cpse	r24, r1
 29c:	fb cf       	rjmp	.-10     	; 0x294 <usart_string_transmit+0xe>
	UART_vtransmit(*string++);
}
 29e:	df 91       	pop	r29
 2a0:	cf 91       	pop	r28
 2a2:	08 95       	ret

000002a4 <__udivmodsi4>:
 2a4:	a1 e2       	ldi	r26, 0x21	; 33
 2a6:	1a 2e       	mov	r1, r26
 2a8:	aa 1b       	sub	r26, r26
 2aa:	bb 1b       	sub	r27, r27
 2ac:	fd 01       	movw	r30, r26
 2ae:	0d c0       	rjmp	.+26     	; 0x2ca <__udivmodsi4_ep>

000002b0 <__udivmodsi4_loop>:
 2b0:	aa 1f       	adc	r26, r26
 2b2:	bb 1f       	adc	r27, r27
 2b4:	ee 1f       	adc	r30, r30
 2b6:	ff 1f       	adc	r31, r31
 2b8:	a2 17       	cp	r26, r18
 2ba:	b3 07       	cpc	r27, r19
 2bc:	e4 07       	cpc	r30, r20
 2be:	f5 07       	cpc	r31, r21
 2c0:	20 f0       	brcs	.+8      	; 0x2ca <__udivmodsi4_ep>
 2c2:	a2 1b       	sub	r26, r18
 2c4:	b3 0b       	sbc	r27, r19
 2c6:	e4 0b       	sbc	r30, r20
 2c8:	f5 0b       	sbc	r31, r21

000002ca <__udivmodsi4_ep>:
 2ca:	66 1f       	adc	r22, r22
 2cc:	77 1f       	adc	r23, r23
 2ce:	88 1f       	adc	r24, r24
 2d0:	99 1f       	adc	r25, r25
 2d2:	1a 94       	dec	r1
 2d4:	69 f7       	brne	.-38     	; 0x2b0 <__udivmodsi4_loop>
 2d6:	60 95       	com	r22
 2d8:	70 95       	com	r23
 2da:	80 95       	com	r24
 2dc:	90 95       	com	r25
 2de:	9b 01       	movw	r18, r22
 2e0:	ac 01       	movw	r20, r24
 2e2:	bd 01       	movw	r22, r26
 2e4:	cf 01       	movw	r24, r30
 2e6:	08 95       	ret

000002e8 <_exit>:
 2e8:	f8 94       	cli

000002ea <__stop_program>:
 2ea:	ff cf       	rjmp	.-2      	; 0x2ea <__stop_program>
