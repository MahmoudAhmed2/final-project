
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000006fa  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000e4  00800060  000006fa  0000076e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000852  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000884  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000130  00000000  00000000  000008c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001678  00000000  00000000  000009f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000009b9  00000000  00000000  00002068  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000cd6  00000000  00000000  00002a21  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001ec  00000000  00000000  000036f8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000500  00000000  00000000  000038e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000a66  00000000  00000000  00003de4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000d0  00000000  00000000  0000484a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	11 e0       	ldi	r17, 0x01	; 1
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea ef       	ldi	r30, 0xFA	; 250
  68:	f6 e0       	ldi	r31, 0x06	; 6
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 34       	cpi	r26, 0x44	; 68
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	21 e0       	ldi	r18, 0x01	; 1
  78:	a4 e4       	ldi	r26, 0x44	; 68
  7a:	b1 e0       	ldi	r27, 0x01	; 1
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a4 34       	cpi	r26, 0x44	; 68
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 ff 01 	call	0x3fe	; 0x3fe <main>
  8a:	0c 94 7b 03 	jmp	0x6f6	; 0x6f6 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DIO_PIN_DIR>:
	}
	return val;
}
//////////////////////////////////set pin dir(output/input)//////////////////////////////
void DIO_PIN_DIR(uint8 port, uint8 pin ,uint8 dir){
	switch(port){
  92:	81 30       	cpi	r24, 0x01	; 1
  94:	01 f1       	breq	.+64     	; 0xd6 <DIO_PIN_DIR+0x44>
  96:	30 f0       	brcs	.+12     	; 0xa4 <DIO_PIN_DIR+0x12>
  98:	82 30       	cpi	r24, 0x02	; 2
  9a:	b1 f1       	breq	.+108    	; 0x108 <DIO_PIN_DIR+0x76>
  9c:	83 30       	cpi	r24, 0x03	; 3
  9e:	09 f4       	brne	.+2      	; 0xa2 <DIO_PIN_DIR+0x10>
  a0:	4c c0       	rjmp	.+152    	; 0x13a <DIO_PIN_DIR+0xa8>
  a2:	08 95       	ret
		case DIO_PORTA:
		if(dir==DIO_PIN_OUTPUT){
  a4:	41 30       	cpi	r20, 0x01	; 1
  a6:	59 f4       	brne	.+22     	; 0xbe <DIO_PIN_DIR+0x2c>
			SIT_BIT(DDRA,pin);
  a8:	2a b3       	in	r18, 0x1a	; 26
  aa:	81 e0       	ldi	r24, 0x01	; 1
  ac:	90 e0       	ldi	r25, 0x00	; 0
  ae:	02 c0       	rjmp	.+4      	; 0xb4 <DIO_PIN_DIR+0x22>
  b0:	88 0f       	add	r24, r24
  b2:	99 1f       	adc	r25, r25
  b4:	6a 95       	dec	r22
  b6:	e2 f7       	brpl	.-8      	; 0xb0 <DIO_PIN_DIR+0x1e>
  b8:	82 2b       	or	r24, r18
  ba:	8a bb       	out	0x1a, r24	; 26
  bc:	08 95       	ret
		}
		else{
			CLR_BIT(DDRA,pin);
  be:	2a b3       	in	r18, 0x1a	; 26
  c0:	81 e0       	ldi	r24, 0x01	; 1
  c2:	90 e0       	ldi	r25, 0x00	; 0
  c4:	02 c0       	rjmp	.+4      	; 0xca <DIO_PIN_DIR+0x38>
  c6:	88 0f       	add	r24, r24
  c8:	99 1f       	adc	r25, r25
  ca:	6a 95       	dec	r22
  cc:	e2 f7       	brpl	.-8      	; 0xc6 <DIO_PIN_DIR+0x34>
  ce:	80 95       	com	r24
  d0:	82 23       	and	r24, r18
  d2:	8a bb       	out	0x1a, r24	; 26
  d4:	08 95       	ret
		}
		break;
		case DIO_PORTB:
		if(dir==DIO_PIN_OUTPUT){
  d6:	41 30       	cpi	r20, 0x01	; 1
  d8:	59 f4       	brne	.+22     	; 0xf0 <DIO_PIN_DIR+0x5e>
			SIT_BIT(DDRB,pin);
  da:	27 b3       	in	r18, 0x17	; 23
  dc:	81 e0       	ldi	r24, 0x01	; 1
  de:	90 e0       	ldi	r25, 0x00	; 0
  e0:	02 c0       	rjmp	.+4      	; 0xe6 <DIO_PIN_DIR+0x54>
  e2:	88 0f       	add	r24, r24
  e4:	99 1f       	adc	r25, r25
  e6:	6a 95       	dec	r22
  e8:	e2 f7       	brpl	.-8      	; 0xe2 <DIO_PIN_DIR+0x50>
  ea:	82 2b       	or	r24, r18
  ec:	87 bb       	out	0x17, r24	; 23
  ee:	08 95       	ret
		}
		else{
			CLR_BIT(DDRB,pin);
  f0:	27 b3       	in	r18, 0x17	; 23
  f2:	81 e0       	ldi	r24, 0x01	; 1
  f4:	90 e0       	ldi	r25, 0x00	; 0
  f6:	02 c0       	rjmp	.+4      	; 0xfc <DIO_PIN_DIR+0x6a>
  f8:	88 0f       	add	r24, r24
  fa:	99 1f       	adc	r25, r25
  fc:	6a 95       	dec	r22
  fe:	e2 f7       	brpl	.-8      	; 0xf8 <DIO_PIN_DIR+0x66>
 100:	80 95       	com	r24
 102:	82 23       	and	r24, r18
 104:	87 bb       	out	0x17, r24	; 23
 106:	08 95       	ret
		}
		break;
		case DIO_PORTC:
		if(dir==DIO_PIN_OUTPUT){
 108:	41 30       	cpi	r20, 0x01	; 1
 10a:	59 f4       	brne	.+22     	; 0x122 <DIO_PIN_DIR+0x90>
			SIT_BIT(DDRC,pin);
 10c:	24 b3       	in	r18, 0x14	; 20
 10e:	81 e0       	ldi	r24, 0x01	; 1
 110:	90 e0       	ldi	r25, 0x00	; 0
 112:	02 c0       	rjmp	.+4      	; 0x118 <DIO_PIN_DIR+0x86>
 114:	88 0f       	add	r24, r24
 116:	99 1f       	adc	r25, r25
 118:	6a 95       	dec	r22
 11a:	e2 f7       	brpl	.-8      	; 0x114 <DIO_PIN_DIR+0x82>
 11c:	82 2b       	or	r24, r18
 11e:	84 bb       	out	0x14, r24	; 20
 120:	08 95       	ret
		}
		else{
			CLR_BIT(DDRC,pin);
 122:	24 b3       	in	r18, 0x14	; 20
 124:	81 e0       	ldi	r24, 0x01	; 1
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	02 c0       	rjmp	.+4      	; 0x12e <DIO_PIN_DIR+0x9c>
 12a:	88 0f       	add	r24, r24
 12c:	99 1f       	adc	r25, r25
 12e:	6a 95       	dec	r22
 130:	e2 f7       	brpl	.-8      	; 0x12a <DIO_PIN_DIR+0x98>
 132:	80 95       	com	r24
 134:	82 23       	and	r24, r18
 136:	84 bb       	out	0x14, r24	; 20
 138:	08 95       	ret
		}
		break;
		case DIO_PORTD:
		if(dir==DIO_PIN_OUTPUT){
 13a:	41 30       	cpi	r20, 0x01	; 1
 13c:	59 f4       	brne	.+22     	; 0x154 <DIO_PIN_DIR+0xc2>
			SIT_BIT(DDRD,pin);
 13e:	21 b3       	in	r18, 0x11	; 17
 140:	81 e0       	ldi	r24, 0x01	; 1
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	02 c0       	rjmp	.+4      	; 0x14a <DIO_PIN_DIR+0xb8>
 146:	88 0f       	add	r24, r24
 148:	99 1f       	adc	r25, r25
 14a:	6a 95       	dec	r22
 14c:	e2 f7       	brpl	.-8      	; 0x146 <DIO_PIN_DIR+0xb4>
 14e:	82 2b       	or	r24, r18
 150:	81 bb       	out	0x11, r24	; 17
 152:	08 95       	ret
		}
		else{
			CLR_BIT(DDRD,pin);
 154:	21 b3       	in	r18, 0x11	; 17
 156:	81 e0       	ldi	r24, 0x01	; 1
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	02 c0       	rjmp	.+4      	; 0x160 <DIO_PIN_DIR+0xce>
 15c:	88 0f       	add	r24, r24
 15e:	99 1f       	adc	r25, r25
 160:	6a 95       	dec	r22
 162:	e2 f7       	brpl	.-8      	; 0x15c <DIO_PIN_DIR+0xca>
 164:	80 95       	com	r24
 166:	82 23       	and	r24, r18
 168:	81 bb       	out	0x11, r24	; 17
 16a:	08 95       	ret

0000016c <SET_PIN_VALUE>:
		break;
	}
}
/////////////////////////////////set pen value////////////////////////////
void  SET_PIN_VALUE(uint8 port,uint8 pin,uint8 val){
	switch (port){
 16c:	81 30       	cpi	r24, 0x01	; 1
 16e:	01 f1       	breq	.+64     	; 0x1b0 <SET_PIN_VALUE+0x44>
 170:	30 f0       	brcs	.+12     	; 0x17e <SET_PIN_VALUE+0x12>
 172:	82 30       	cpi	r24, 0x02	; 2
 174:	b1 f1       	breq	.+108    	; 0x1e2 <SET_PIN_VALUE+0x76>
 176:	83 30       	cpi	r24, 0x03	; 3
 178:	09 f4       	brne	.+2      	; 0x17c <SET_PIN_VALUE+0x10>
 17a:	4c c0       	rjmp	.+152    	; 0x214 <SET_PIN_VALUE+0xa8>
 17c:	08 95       	ret
		case DIO_PORTA:
		if(val==PIN_HIGH){
 17e:	41 30       	cpi	r20, 0x01	; 1
 180:	59 f4       	brne	.+22     	; 0x198 <SET_PIN_VALUE+0x2c>
			SIT_BIT(PORTA,pin);
 182:	2b b3       	in	r18, 0x1b	; 27
 184:	81 e0       	ldi	r24, 0x01	; 1
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	02 c0       	rjmp	.+4      	; 0x18e <SET_PIN_VALUE+0x22>
 18a:	88 0f       	add	r24, r24
 18c:	99 1f       	adc	r25, r25
 18e:	6a 95       	dec	r22
 190:	e2 f7       	brpl	.-8      	; 0x18a <SET_PIN_VALUE+0x1e>
 192:	82 2b       	or	r24, r18
 194:	8b bb       	out	0x1b, r24	; 27
 196:	08 95       	ret
		}
		else {
			CLR_BIT(PORTA,pin);
 198:	2b b3       	in	r18, 0x1b	; 27
 19a:	81 e0       	ldi	r24, 0x01	; 1
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	02 c0       	rjmp	.+4      	; 0x1a4 <SET_PIN_VALUE+0x38>
 1a0:	88 0f       	add	r24, r24
 1a2:	99 1f       	adc	r25, r25
 1a4:	6a 95       	dec	r22
 1a6:	e2 f7       	brpl	.-8      	; 0x1a0 <SET_PIN_VALUE+0x34>
 1a8:	80 95       	com	r24
 1aa:	82 23       	and	r24, r18
 1ac:	8b bb       	out	0x1b, r24	; 27
 1ae:	08 95       	ret
		}
		break;
		case DIO_PORTB:
		if(val==PIN_HIGH){
 1b0:	41 30       	cpi	r20, 0x01	; 1
 1b2:	59 f4       	brne	.+22     	; 0x1ca <SET_PIN_VALUE+0x5e>
			SIT_BIT(PORTB,pin);
 1b4:	28 b3       	in	r18, 0x18	; 24
 1b6:	81 e0       	ldi	r24, 0x01	; 1
 1b8:	90 e0       	ldi	r25, 0x00	; 0
 1ba:	02 c0       	rjmp	.+4      	; 0x1c0 <SET_PIN_VALUE+0x54>
 1bc:	88 0f       	add	r24, r24
 1be:	99 1f       	adc	r25, r25
 1c0:	6a 95       	dec	r22
 1c2:	e2 f7       	brpl	.-8      	; 0x1bc <SET_PIN_VALUE+0x50>
 1c4:	82 2b       	or	r24, r18
 1c6:	88 bb       	out	0x18, r24	; 24
 1c8:	08 95       	ret
		}
		else {
			CLR_BIT(PORTB,pin);
 1ca:	28 b3       	in	r18, 0x18	; 24
 1cc:	81 e0       	ldi	r24, 0x01	; 1
 1ce:	90 e0       	ldi	r25, 0x00	; 0
 1d0:	02 c0       	rjmp	.+4      	; 0x1d6 <SET_PIN_VALUE+0x6a>
 1d2:	88 0f       	add	r24, r24
 1d4:	99 1f       	adc	r25, r25
 1d6:	6a 95       	dec	r22
 1d8:	e2 f7       	brpl	.-8      	; 0x1d2 <SET_PIN_VALUE+0x66>
 1da:	80 95       	com	r24
 1dc:	82 23       	and	r24, r18
 1de:	88 bb       	out	0x18, r24	; 24
 1e0:	08 95       	ret
		}
		break;
		case DIO_PORTC:
		if(val==PIN_HIGH){
 1e2:	41 30       	cpi	r20, 0x01	; 1
 1e4:	59 f4       	brne	.+22     	; 0x1fc <SET_PIN_VALUE+0x90>
			SIT_BIT(PORTC,pin);
 1e6:	25 b3       	in	r18, 0x15	; 21
 1e8:	81 e0       	ldi	r24, 0x01	; 1
 1ea:	90 e0       	ldi	r25, 0x00	; 0
 1ec:	02 c0       	rjmp	.+4      	; 0x1f2 <SET_PIN_VALUE+0x86>
 1ee:	88 0f       	add	r24, r24
 1f0:	99 1f       	adc	r25, r25
 1f2:	6a 95       	dec	r22
 1f4:	e2 f7       	brpl	.-8      	; 0x1ee <SET_PIN_VALUE+0x82>
 1f6:	82 2b       	or	r24, r18
 1f8:	85 bb       	out	0x15, r24	; 21
 1fa:	08 95       	ret
		}
		else {
			CLR_BIT(PORTC,pin);
 1fc:	25 b3       	in	r18, 0x15	; 21
 1fe:	81 e0       	ldi	r24, 0x01	; 1
 200:	90 e0       	ldi	r25, 0x00	; 0
 202:	02 c0       	rjmp	.+4      	; 0x208 <SET_PIN_VALUE+0x9c>
 204:	88 0f       	add	r24, r24
 206:	99 1f       	adc	r25, r25
 208:	6a 95       	dec	r22
 20a:	e2 f7       	brpl	.-8      	; 0x204 <SET_PIN_VALUE+0x98>
 20c:	80 95       	com	r24
 20e:	82 23       	and	r24, r18
 210:	85 bb       	out	0x15, r24	; 21
 212:	08 95       	ret
		}
		break;
		case DIO_PORTD:
		if(val==PIN_HIGH){
 214:	41 30       	cpi	r20, 0x01	; 1
 216:	59 f4       	brne	.+22     	; 0x22e <SET_PIN_VALUE+0xc2>
			SIT_BIT(PORTD,pin);
 218:	22 b3       	in	r18, 0x12	; 18
 21a:	81 e0       	ldi	r24, 0x01	; 1
 21c:	90 e0       	ldi	r25, 0x00	; 0
 21e:	02 c0       	rjmp	.+4      	; 0x224 <SET_PIN_VALUE+0xb8>
 220:	88 0f       	add	r24, r24
 222:	99 1f       	adc	r25, r25
 224:	6a 95       	dec	r22
 226:	e2 f7       	brpl	.-8      	; 0x220 <SET_PIN_VALUE+0xb4>
 228:	82 2b       	or	r24, r18
 22a:	82 bb       	out	0x12, r24	; 18
 22c:	08 95       	ret
		}
		else {
			CLR_BIT(PORTD,pin);
 22e:	22 b3       	in	r18, 0x12	; 18
 230:	81 e0       	ldi	r24, 0x01	; 1
 232:	90 e0       	ldi	r25, 0x00	; 0
 234:	02 c0       	rjmp	.+4      	; 0x23a <SET_PIN_VALUE+0xce>
 236:	88 0f       	add	r24, r24
 238:	99 1f       	adc	r25, r25
 23a:	6a 95       	dec	r22
 23c:	e2 f7       	brpl	.-8      	; 0x236 <SET_PIN_VALUE+0xca>
 23e:	80 95       	com	r24
 240:	82 23       	and	r24, r18
 242:	82 bb       	out	0x12, r24	; 18
 244:	08 95       	ret

00000246 <DEFINE_INTERRUPT0>:
#include <util/delay.h>
#include <avr/interrupt.h>
#include "INTERRUPT.h"
#include <avr/io.h>
void DEFINE_INTERRUPT0(void){
	sei();
 246:	78 94       	sei
	DIO_PIN_DIR(DIO_PORTD,DIO_PIN2,DIO_PIN_INPUT);
 248:	40 e0       	ldi	r20, 0x00	; 0
 24a:	62 e0       	ldi	r22, 0x02	; 2
 24c:	83 e0       	ldi	r24, 0x03	; 3
 24e:	0e 94 49 00 	call	0x92	; 0x92 <DIO_PIN_DIR>
	SET_PIN_VALUE(DIO_PORTD,DIO_PIN2,PIN_HIGH);
 252:	41 e0       	ldi	r20, 0x01	; 1
 254:	62 e0       	ldi	r22, 0x02	; 2
 256:	83 e0       	ldi	r24, 0x03	; 3
 258:	0e 94 b6 00 	call	0x16c	; 0x16c <SET_PIN_VALUE>
	GICR|=(1<<INT0);
 25c:	8b b7       	in	r24, 0x3b	; 59
 25e:	80 64       	ori	r24, 0x40	; 64
 260:	8b bf       	out	0x3b, r24	; 59
 262:	08 95       	ret

00000264 <KEYPAD_INTIALIZE>:
uint8 arr[4][4]={{'1','2','3','/'},
                 {'4','5','6','*'},
                 {'7','8','9','-'},
                 {'s','0','=','+'}};
void KEYPAD_INTIALIZE(void){
DDRC=0x0f;
 264:	8f e0       	ldi	r24, 0x0F	; 15
 266:	84 bb       	out	0x14, r24	; 20
PORTC |=0xff;// there is a pin called (pull up direction -sfidr	
 268:	85 b3       	in	r24, 0x15	; 21
 26a:	8f ef       	ldi	r24, 0xFF	; 255
 26c:	85 bb       	out	0x15, r24	; 21
 26e:	08 95       	ret

00000270 <KEYPAD_READ>:
}

uint8 KEYPAD_READ(void){
 270:	80 e0       	ldi	r24, 0x00	; 0
 272:	90 e0       	ldi	r25, 0x00	; 0
	 
						 
					 
	
	for(uint8 i=0;i<4;i++){
	PORTC=0xff;
 274:	af ef       	ldi	r26, 0xFF	; 255
	CLR_BIT(PORTC,i);
 276:	e1 e0       	ldi	r30, 0x01	; 1
 278:	f0 e0       	ldi	r31, 0x00	; 0
	 
						 
					 
	
	for(uint8 i=0;i<4;i++){
	PORTC=0xff;
 27a:	a5 bb       	out	0x15, r26	; 21
	CLR_BIT(PORTC,i);
 27c:	35 b3       	in	r19, 0x15	; 21
 27e:	bc 01       	movw	r22, r24
 280:	af 01       	movw	r20, r30
 282:	08 2e       	mov	r0, r24
 284:	02 c0       	rjmp	.+4      	; 0x28a <KEYPAD_READ+0x1a>
 286:	44 0f       	add	r20, r20
 288:	55 1f       	adc	r21, r21
 28a:	0a 94       	dec	r0
 28c:	e2 f7       	brpl	.-8      	; 0x286 <KEYPAD_READ+0x16>
 28e:	24 2f       	mov	r18, r20
 290:	20 95       	com	r18
 292:	23 23       	and	r18, r19
 294:	25 bb       	out	0x15, r18	; 21
	for(uint8 j=0;j<4;j++){
    uint8 temp=READ_BIT(PINC,(j+4));
	if(temp==0)
 296:	9c 9b       	sbis	0x13, 4	; 19
 298:	0f c0       	rjmp	.+30     	; 0x2b8 <KEYPAD_READ+0x48>
 29a:	9d 9b       	sbis	0x13, 5	; 19
 29c:	07 c0       	rjmp	.+14     	; 0x2ac <KEYPAD_READ+0x3c>
 29e:	9e 9b       	sbis	0x13, 6	; 19
 2a0:	08 c0       	rjmp	.+16     	; 0x2b2 <KEYPAD_READ+0x42>
 2a2:	9f 99       	sbic	0x13, 7	; 19
 2a4:	16 c0       	rjmp	.+44     	; 0x2d2 <KEYPAD_READ+0x62>
	
	for(uint8 i=0;i<4;i++){
	PORTC=0xff;
	CLR_BIT(PORTC,i);
	for(uint8 j=0;j<4;j++){
    uint8 temp=READ_BIT(PINC,(j+4));
 2a6:	83 e0       	ldi	r24, 0x03	; 3
 2a8:	90 e0       	ldi	r25, 0x00	; 0
 2aa:	08 c0       	rjmp	.+16     	; 0x2bc <KEYPAD_READ+0x4c>
 2ac:	81 e0       	ldi	r24, 0x01	; 1
 2ae:	90 e0       	ldi	r25, 0x00	; 0
 2b0:	05 c0       	rjmp	.+10     	; 0x2bc <KEYPAD_READ+0x4c>
 2b2:	82 e0       	ldi	r24, 0x02	; 2
 2b4:	90 e0       	ldi	r25, 0x00	; 0
 2b6:	02 c0       	rjmp	.+4      	; 0x2bc <KEYPAD_READ+0x4c>
 2b8:	80 e0       	ldi	r24, 0x00	; 0
 2ba:	90 e0       	ldi	r25, 0x00	; 0
	if(temp==0)
	{
		return  arr[i][j];
 2bc:	66 0f       	add	r22, r22
 2be:	77 1f       	adc	r23, r23
 2c0:	66 0f       	add	r22, r22
 2c2:	77 1f       	adc	r23, r23
 2c4:	60 5a       	subi	r22, 0xA0	; 160
 2c6:	7f 4f       	sbci	r23, 0xFF	; 255
 2c8:	fb 01       	movw	r30, r22
 2ca:	e8 0f       	add	r30, r24
 2cc:	f9 1f       	adc	r31, r25
 2ce:	80 81       	ld	r24, Z
 2d0:	08 95       	ret
 2d2:	01 96       	adiw	r24, 0x01	; 1
uint8 KEYPAD_READ(void){
	 
						 
					 
	
	for(uint8 i=0;i<4;i++){
 2d4:	84 30       	cpi	r24, 0x04	; 4
 2d6:	91 05       	cpc	r25, r1
 2d8:	81 f6       	brne	.-96     	; 0x27a <KEYPAD_READ+0xa>
	}
	}

	
	}
	return 0xff;//define the magic number to default
 2da:	8f ef       	ldi	r24, 0xFF	; 255
	
}
 2dc:	08 95       	ret

000002de <SEND_FALLING_EDGE>:
#define RS 1
#define RW 2
#define EN 3

void SEND_FALLING_EDGE(void){
	SIT_BIT(PORTB,EN);
 2de:	c3 9a       	sbi	0x18, 3	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2e0:	8f e1       	ldi	r24, 0x1F	; 31
 2e2:	9e e4       	ldi	r25, 0x4E	; 78
 2e4:	01 97       	sbiw	r24, 0x01	; 1
 2e6:	f1 f7       	brne	.-4      	; 0x2e4 <SEND_FALLING_EDGE+0x6>
 2e8:	00 c0       	rjmp	.+0      	; 0x2ea <SEND_FALLING_EDGE+0xc>
 2ea:	00 00       	nop
	_delay_ms(5);
	CLR_BIT(PORTB,EN);
 2ec:	c3 98       	cbi	0x18, 3	; 24
 2ee:	8f e1       	ldi	r24, 0x1F	; 31
 2f0:	9e e4       	ldi	r25, 0x4E	; 78
 2f2:	01 97       	sbiw	r24, 0x01	; 1
 2f4:	f1 f7       	brne	.-4      	; 0x2f2 <SEND_FALLING_EDGE+0x14>
 2f6:	00 c0       	rjmp	.+0      	; 0x2f8 <SEND_FALLING_EDGE+0x1a>
 2f8:	00 00       	nop
 2fa:	08 95       	ret

000002fc <SEND_CMD>:
	_delay_ms(5);
}
void SEND_CMD(uint8 cmd){
 2fc:	cf 93       	push	r28
 2fe:	c8 2f       	mov	r28, r24
	PORTA&=0x0f;
 300:	8b b3       	in	r24, 0x1b	; 27
 302:	8f 70       	andi	r24, 0x0F	; 15
 304:	8b bb       	out	0x1b, r24	; 27
	PORTA|=(cmd&0xf0);//send last 4 digits 
 306:	8b b3       	in	r24, 0x1b	; 27
 308:	9c 2f       	mov	r25, r28
 30a:	90 7f       	andi	r25, 0xF0	; 240
 30c:	89 2b       	or	r24, r25
 30e:	8b bb       	out	0x1b, r24	; 27
	CLR_BIT(PORTB,RS);
 310:	c1 98       	cbi	0x18, 1	; 24
	SEND_FALLING_EDGE();
 312:	0e 94 6f 01 	call	0x2de	; 0x2de <SEND_FALLING_EDGE>
	PORTA&=0x0f;
 316:	8b b3       	in	r24, 0x1b	; 27
 318:	8f 70       	andi	r24, 0x0F	; 15
 31a:	8b bb       	out	0x1b, r24	; 27
	PORTA|=(cmd<<4);//send first 4 digits
 31c:	2b b3       	in	r18, 0x1b	; 27
 31e:	30 e1       	ldi	r19, 0x10	; 16
 320:	c3 9f       	mul	r28, r19
 322:	c0 01       	movw	r24, r0
 324:	11 24       	eor	r1, r1
 326:	82 2b       	or	r24, r18
 328:	8b bb       	out	0x1b, r24	; 27
	CLR_BIT(PORTB,RS);
 32a:	c1 98       	cbi	0x18, 1	; 24
	SEND_FALLING_EDGE();	
 32c:	0e 94 6f 01 	call	0x2de	; 0x2de <SEND_FALLING_EDGE>
}
 330:	cf 91       	pop	r28
 332:	08 95       	ret

00000334 <SEND_DATA>:
void SEND_DATA(uint8 cmd){
 334:	cf 93       	push	r28
 336:	c8 2f       	mov	r28, r24
	PORTA&=0x0f;
 338:	8b b3       	in	r24, 0x1b	; 27
 33a:	8f 70       	andi	r24, 0x0F	; 15
 33c:	8b bb       	out	0x1b, r24	; 27
	PORTA|=(cmd&0xf0);//send last 4 digits
 33e:	8b b3       	in	r24, 0x1b	; 27
 340:	9c 2f       	mov	r25, r28
 342:	90 7f       	andi	r25, 0xF0	; 240
 344:	89 2b       	or	r24, r25
 346:	8b bb       	out	0x1b, r24	; 27
	SIT_BIT(PORTB,RS);
 348:	c1 9a       	sbi	0x18, 1	; 24
	SEND_FALLING_EDGE();
 34a:	0e 94 6f 01 	call	0x2de	; 0x2de <SEND_FALLING_EDGE>
	PORTA&=0x0f;
 34e:	8b b3       	in	r24, 0x1b	; 27
 350:	8f 70       	andi	r24, 0x0F	; 15
 352:	8b bb       	out	0x1b, r24	; 27
	PORTA|=(cmd<<4);//send first 4 digits
 354:	2b b3       	in	r18, 0x1b	; 27
 356:	30 e1       	ldi	r19, 0x10	; 16
 358:	c3 9f       	mul	r28, r19
 35a:	c0 01       	movw	r24, r0
 35c:	11 24       	eor	r1, r1
 35e:	82 2b       	or	r24, r18
 360:	8b bb       	out	0x1b, r24	; 27
	SIT_BIT(PORTB,RS);
 362:	c1 9a       	sbi	0x18, 1	; 24
	SEND_FALLING_EDGE();
 364:	0e 94 6f 01 	call	0x2de	; 0x2de <SEND_FALLING_EDGE>
}
 368:	cf 91       	pop	r28
 36a:	08 95       	ret

0000036c <LCD_INITIALIZE>:
void LCD_INITIALIZE(void){
DDRB|=0x0E;
 36c:	87 b3       	in	r24, 0x17	; 23
 36e:	8e 60       	ori	r24, 0x0E	; 14
 370:	87 bb       	out	0x17, r24	; 23
DDRA|=0xf0;
 372:	8a b3       	in	r24, 0x1a	; 26
 374:	80 6f       	ori	r24, 0xF0	; 240
 376:	8a bb       	out	0x1a, r24	; 26
CLR_BIT(PORTB,RW);
 378:	c2 98       	cbi	0x18, 2	; 24
SEND_CMD(0x33);
 37a:	83 e3       	ldi	r24, 0x33	; 51
 37c:	0e 94 7e 01 	call	0x2fc	; 0x2fc <SEND_CMD>
SEND_CMD(0x32);
 380:	82 e3       	ldi	r24, 0x32	; 50
 382:	0e 94 7e 01 	call	0x2fc	; 0x2fc <SEND_CMD>
SEND_CMD(0x28);
 386:	88 e2       	ldi	r24, 0x28	; 40
 388:	0e 94 7e 01 	call	0x2fc	; 0x2fc <SEND_CMD>
SEND_CMD(0x01);
 38c:	81 e0       	ldi	r24, 0x01	; 1
 38e:	0e 94 7e 01 	call	0x2fc	; 0x2fc <SEND_CMD>
SEND_CMD(0x0f);
 392:	8f e0       	ldi	r24, 0x0F	; 15
 394:	0e 94 7e 01 	call	0x2fc	; 0x2fc <SEND_CMD>
 398:	2f ef       	ldi	r18, 0xFF	; 255
 39a:	89 ef       	ldi	r24, 0xF9	; 249
 39c:	90 e0       	ldi	r25, 0x00	; 0
 39e:	21 50       	subi	r18, 0x01	; 1
 3a0:	80 40       	sbci	r24, 0x00	; 0
 3a2:	90 40       	sbci	r25, 0x00	; 0
 3a4:	e1 f7       	brne	.-8      	; 0x39e <LCD_INITIALIZE+0x32>
 3a6:	00 c0       	rjmp	.+0      	; 0x3a8 <LCD_INITIALIZE+0x3c>
 3a8:	00 00       	nop
 3aa:	08 95       	ret

000003ac <MOVING_CURSOR>:
_delay_ms(20);	
}
void MOVING_CURSOR(uint8 row ,uint8 col){
	uint8 temp;
	if(row==0){
 3ac:	81 11       	cpse	r24, r1
 3ae:	03 c0       	rjmp	.+6      	; 0x3b6 <MOVING_CURSOR+0xa>
		temp=0x80+col;
 3b0:	80 e8       	ldi	r24, 0x80	; 128
 3b2:	86 0f       	add	r24, r22
 3b4:	02 c0       	rjmp	.+4      	; 0x3ba <MOVING_CURSOR+0xe>
	}
	else{
		temp=0xc0+col;
 3b6:	80 ec       	ldi	r24, 0xC0	; 192
 3b8:	86 0f       	add	r24, r22
	}
	SEND_CMD(temp);
 3ba:	0e 94 7e 01 	call	0x2fc	; 0x2fc <SEND_CMD>
 3be:	08 95       	ret

000003c0 <LCD_PRINT>:
}
void LCD_PRINT(char *cmd){
 3c0:	0f 93       	push	r16
 3c2:	1f 93       	push	r17
 3c4:	cf 93       	push	r28
 3c6:	df 93       	push	r29
 3c8:	fc 01       	movw	r30, r24
	for(int i=0;i<16;i++)
	{
		if(cmd[i]=='\0'){
 3ca:	80 81       	ld	r24, Z
 3cc:	81 11       	cpse	r24, r1
 3ce:	0a c0       	rjmp	.+20     	; 0x3e4 <LCD_PRINT+0x24>
 3d0:	11 c0       	rjmp	.+34     	; 0x3f4 <LCD_PRINT+0x34>
 3d2:	89 91       	ld	r24, Y+
 3d4:	88 23       	and	r24, r24
 3d6:	71 f0       	breq	.+28     	; 0x3f4 <LCD_PRINT+0x34>
			break;
		}
		SEND_DATA(cmd[i]);	
 3d8:	0e 94 9a 01 	call	0x334	; 0x334 <SEND_DATA>
		temp=0xc0+col;
	}
	SEND_CMD(temp);
}
void LCD_PRINT(char *cmd){
	for(int i=0;i<16;i++)
 3dc:	0c 17       	cp	r16, r28
 3de:	1d 07       	cpc	r17, r29
 3e0:	c1 f7       	brne	.-16     	; 0x3d2 <LCD_PRINT+0x12>
 3e2:	08 c0       	rjmp	.+16     	; 0x3f4 <LCD_PRINT+0x34>
 3e4:	8f 01       	movw	r16, r30
	{
		if(cmd[i]=='\0'){
			break;
		}
		SEND_DATA(cmd[i]);	
 3e6:	0e 94 9a 01 	call	0x334	; 0x334 <SEND_DATA>
 3ea:	e8 01       	movw	r28, r16
 3ec:	21 96       	adiw	r28, 0x01	; 1
 3ee:	00 5f       	subi	r16, 0xF0	; 240
 3f0:	1f 4f       	sbci	r17, 0xFF	; 255
 3f2:	ef cf       	rjmp	.-34     	; 0x3d2 <LCD_PRINT+0x12>
	}
}
 3f4:	df 91       	pop	r29
 3f6:	cf 91       	pop	r28
 3f8:	1f 91       	pop	r17
 3fa:	0f 91       	pop	r16
 3fc:	08 95       	ret

000003fe <main>:
#include "INTERRUPT.h"
#include <avr/io.h>
#include <avr/interrupt.h>

int main(void)
{
 3fe:	cf 93       	push	r28
 400:	df 93       	push	r29
 402:	cd b7       	in	r28, 0x3d	; 61
 404:	de b7       	in	r29, 0x3e	; 62
 406:	60 97       	sbiw	r28, 0x10	; 16
 408:	0f b6       	in	r0, 0x3f	; 63
 40a:	f8 94       	cli
 40c:	de bf       	out	0x3e, r29	; 62
 40e:	0f be       	out	0x3f, r0	; 63
 410:	cd bf       	out	0x3d, r28	; 61
	
	char key_entered;
	SPI_INIT_SLAVE();
 412:	0e 94 74 03 	call	0x6e8	; 0x6e8 <SPI_INIT_SLAVE>
	KEYPAD_INTIALIZE();
 416:	0e 94 32 01 	call	0x264	; 0x264 <KEYPAD_INTIALIZE>
	LCD_INITIALIZE();
 41a:	0e 94 b6 01 	call	0x36c	; 0x36c <LCD_INITIALIZE>
	DEFINE_INTERRUPT0();
 41e:	0e 94 23 01 	call	0x246	; 0x246 <DEFINE_INTERRUPT0>
	
    MOVING_CURSOR(0,0);
 422:	60 e0       	ldi	r22, 0x00	; 0
 424:	80 e0       	ldi	r24, 0x00	; 0
 426:	0e 94 d6 01 	call	0x3ac	; 0x3ac <MOVING_CURSOR>
	LCD_PRINT("SMART HOME v1");
 42a:	80 e7       	ldi	r24, 0x70	; 112
 42c:	90 e0       	ldi	r25, 0x00	; 0
 42e:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <LCD_PRINT>
 432:	2f ef       	ldi	r18, 0xFF	; 255
 434:	83 ed       	ldi	r24, 0xD3	; 211
 436:	90 e3       	ldi	r25, 0x30	; 48
 438:	21 50       	subi	r18, 0x01	; 1
 43a:	80 40       	sbci	r24, 0x00	; 0
 43c:	90 40       	sbci	r25, 0x00	; 0
 43e:	e1 f7       	brne	.-8      	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
 440:	00 c0       	rjmp	.+0      	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
 442:	00 00       	nop
	_delay_ms(1000);
	SEND_CMD(0x01);
 444:	81 e0       	ldi	r24, 0x01	; 1
 446:	0e 94 7e 01 	call	0x2fc	; 0x2fc <SEND_CMD>
	LCD_PRINT("enter password:");
 44a:	8e e7       	ldi	r24, 0x7E	; 126
 44c:	90 e0       	ldi	r25, 0x00	; 0
 44e:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <LCD_PRINT>
	MOVING_CURSOR(1,0);
 452:	60 e0       	ldi	r22, 0x00	; 0
 454:	81 e0       	ldi	r24, 0x01	; 1
 456:	0e 94 d6 01 	call	0x3ac	; 0x3ac <MOVING_CURSOR>
	char string2[16];

    DIO_PIN_DIR(DIO_PORTD,DIO_PIN1,DIO_PIN_OUTPUT);
 45a:	41 e0       	ldi	r20, 0x01	; 1
 45c:	61 e0       	ldi	r22, 0x01	; 1
 45e:	83 e0       	ldi	r24, 0x03	; 3
 460:	0e 94 49 00 	call	0x92	; 0x92 <DIO_PIN_DIR>
    CLR_BIT(PORTD,DIO_PIN1);
 464:	91 98       	cbi	0x12, 1	; 18
    DIO_PIN_DIR(DIO_PORTD,DIO_PIN4,DIO_PIN_OUTPUT);
 466:	41 e0       	ldi	r20, 0x01	; 1
 468:	64 e0       	ldi	r22, 0x04	; 4
 46a:	83 e0       	ldi	r24, 0x03	; 3
 46c:	0e 94 49 00 	call	0x92	; 0x92 <DIO_PIN_DIR>
	DIO_PIN_DIR(DIO_PORTD,DIO_PIN5,DIO_PIN_OUTPUT);
 470:	41 e0       	ldi	r20, 0x01	; 1
 472:	65 e0       	ldi	r22, 0x05	; 5
 474:	83 e0       	ldi	r24, 0x03	; 3
 476:	0e 94 49 00 	call	0x92	; 0x92 <DIO_PIN_DIR>
	DIO_PIN_DIR(DIO_PORTD,DIO_PIN6,DIO_PIN_OUTPUT);
 47a:	41 e0       	ldi	r20, 0x01	; 1
 47c:	66 e0       	ldi	r22, 0x06	; 6
 47e:	83 e0       	ldi	r24, 0x03	; 3
 480:	0e 94 49 00 	call	0x92	; 0x92 <DIO_PIN_DIR>
	DIO_PIN_DIR(DIO_PORTD,DIO_PIN7,DIO_PIN_OUTPUT);
 484:	41 e0       	ldi	r20, 0x01	; 1
 486:	67 e0       	ldi	r22, 0x07	; 7
 488:	83 e0       	ldi	r24, 0x03	; 3
 48a:	0e 94 49 00 	call	0x92	; 0x92 <DIO_PIN_DIR>
      char *string10="lamp 4 is off \r";
	  char data;
	  uint8 val;
	  uint8 x=0;
	  uint8 y=0;
	  uint8 flag=0;
 48e:	f1 2c       	mov	r15, r1
      char *string9="lamp 3 is off \r";
      char *string10="lamp 4 is off \r";
	  char data;
	  uint8 val;
	  uint8 x=0;
	  uint8 y=0;
 490:	00 e0       	ldi	r16, 0x00	; 0
      char *string8="lamp 2 is off \r";
      char *string9="lamp 3 is off \r";
      char *string10="lamp 4 is off \r";
	  char data;
	  uint8 val;
	  uint8 x=0;
 492:	e1 2c       	mov	r14, r1
		    MOVING_CURSOR(1,0);
			LCD_PRINT(string7);	
			}
			break;
			case '2':
			TOGGLE_BIT(PORTD,DIO_PIN5);
 494:	68 94       	set
 496:	bb 24       	eor	r11, r11
 498:	b5 f8       	bld	r11, 5
				MOVING_CURSOR(1,0);
				LCD_PRINT(string8);
			}
			break;
			case '3':
			TOGGLE_BIT(PORTD,DIO_PIN6);
 49a:	68 94       	set
 49c:	cc 24       	eor	r12, r12
 49e:	c6 f8       	bld	r12, 6
		SIT_BIT(PORTD,DIO_PIN1);
		data=SPI_U8SlAVE_RECIEVER();
         
		switch(data){
			case '1':
			TOGGLE_BIT(PORTD,DIO_PIN4);
 4a0:	68 94       	set
 4a2:	dd 24       	eor	r13, r13
 4a4:	d4 f8       	bld	r13, 4
 4a6:	85 c0       	rjmp	.+266    	; 0x5b2 <__LOCK_REGION_LENGTH__+0x1b2>
	  uint8 y=0;
	  uint8 flag=0;
    while (1) 
    {
		while(flag==0){
			key_entered=KEYPAD_READ();
 4a8:	0e 94 38 01 	call	0x270	; 0x270 <KEYPAD_READ>
 4ac:	18 2f       	mov	r17, r24
 4ae:	2f ef       	ldi	r18, 0xFF	; 255
 4b0:	81 ee       	ldi	r24, 0xE1	; 225
 4b2:	94 e0       	ldi	r25, 0x04	; 4
 4b4:	21 50       	subi	r18, 0x01	; 1
 4b6:	80 40       	sbci	r24, 0x00	; 0
 4b8:	90 40       	sbci	r25, 0x00	; 0
 4ba:	e1 f7       	brne	.-8      	; 0x4b4 <__LOCK_REGION_LENGTH__+0xb4>
 4bc:	00 c0       	rjmp	.+0      	; 0x4be <__LOCK_REGION_LENGTH__+0xbe>
 4be:	00 00       	nop
			_delay_ms(100);
			if(key_entered!=0xff){
 4c0:	1f 3f       	cpi	r17, 0xFF	; 255
 4c2:	09 f4       	brne	.+2      	; 0x4c6 <__LOCK_REGION_LENGTH__+0xc6>
 4c4:	76 c0       	rjmp	.+236    	; 0x5b2 <__LOCK_REGION_LENGTH__+0x1b2>
				y++;
				
				if(key_entered!='s'&&y!=5){
 4c6:	13 37       	cpi	r17, 0x73	; 115
 4c8:	79 f0       	breq	.+30     	; 0x4e8 <__LOCK_REGION_LENGTH__+0xe8>
    {
		while(flag==0){
			key_entered=KEYPAD_READ();
			_delay_ms(100);
			if(key_entered!=0xff){
				y++;
 4ca:	0f 5f       	subi	r16, 0xFF	; 255
				
				if(key_entered!='s'&&y!=5){
 4cc:	05 30       	cpi	r16, 0x05	; 5
 4ce:	61 f0       	breq	.+24     	; 0x4e8 <__LOCK_REGION_LENGTH__+0xe8>
					SEND_DATA('*');
 4d0:	8a e2       	ldi	r24, 0x2A	; 42
 4d2:	0e 94 9a 01 	call	0x334	; 0x334 <SEND_DATA>
					string2[x++]=key_entered;
 4d6:	e1 e0       	ldi	r30, 0x01	; 1
 4d8:	f0 e0       	ldi	r31, 0x00	; 0
 4da:	ec 0f       	add	r30, r28
 4dc:	fd 1f       	adc	r31, r29
 4de:	ee 0d       	add	r30, r14
 4e0:	f1 1d       	adc	r31, r1
 4e2:	10 83       	st	Z, r17
 4e4:	e3 94       	inc	r14
 4e6:	65 c0       	rjmp	.+202    	; 0x5b2 <__LOCK_REGION_LENGTH__+0x1b2>
				}
				else
				{
					y=0;
					x=0;
					if(string2[0]=='1'&&string2[1]=='2'&&string2[2]=='3'&&string2[3]=='4'){
 4e8:	89 81       	ldd	r24, Y+1	; 0x01
 4ea:	81 33       	cpi	r24, 0x31	; 49
 4ec:	c9 f5       	brne	.+114    	; 0x560 <__LOCK_REGION_LENGTH__+0x160>
 4ee:	8a 81       	ldd	r24, Y+2	; 0x02
 4f0:	82 33       	cpi	r24, 0x32	; 50
 4f2:	b1 f5       	brne	.+108    	; 0x560 <__LOCK_REGION_LENGTH__+0x160>
 4f4:	8b 81       	ldd	r24, Y+3	; 0x03
 4f6:	83 33       	cpi	r24, 0x33	; 51
 4f8:	99 f5       	brne	.+102    	; 0x560 <__LOCK_REGION_LENGTH__+0x160>
 4fa:	8c 81       	ldd	r24, Y+4	; 0x04
 4fc:	84 33       	cpi	r24, 0x34	; 52
 4fe:	81 f5       	brne	.+96     	; 0x560 <__LOCK_REGION_LENGTH__+0x160>
					SEND_CMD(0x01);
 500:	81 e0       	ldi	r24, 0x01	; 1
 502:	0e 94 7e 01 	call	0x2fc	; 0x2fc <SEND_CMD>
					MOVING_CURSOR(0,0);
 506:	60 e0       	ldi	r22, 0x00	; 0
 508:	80 e0       	ldi	r24, 0x00	; 0
 50a:	0e 94 d6 01 	call	0x3ac	; 0x3ac <MOVING_CURSOR>
					LCD_PRINT("pass correct");
 50e:	8e e8       	ldi	r24, 0x8E	; 142
 510:	90 e0       	ldi	r25, 0x00	; 0
 512:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <LCD_PRINT>
					MOVING_CURSOR(1,5);
 516:	65 e0       	ldi	r22, 0x05	; 5
 518:	81 e0       	ldi	r24, 0x01	; 1
 51a:	0e 94 d6 01 	call	0x3ac	; 0x3ac <MOVING_CURSOR>
					LCD_PRINT(":)");
 51e:	8b e9       	ldi	r24, 0x9B	; 155
 520:	90 e0       	ldi	r25, 0x00	; 0
 522:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <LCD_PRINT>
 526:	2f ef       	ldi	r18, 0xFF	; 255
 528:	83 ed       	ldi	r24, 0xD3	; 211
 52a:	90 e3       	ldi	r25, 0x30	; 48
 52c:	21 50       	subi	r18, 0x01	; 1
 52e:	80 40       	sbci	r24, 0x00	; 0
 530:	90 40       	sbci	r25, 0x00	; 0
 532:	e1 f7       	brne	.-8      	; 0x52c <__LOCK_REGION_LENGTH__+0x12c>
 534:	00 c0       	rjmp	.+0      	; 0x536 <__LOCK_REGION_LENGTH__+0x136>
 536:	00 00       	nop
					_delay_ms(1000);
					SEND_CMD(0x01);
 538:	81 e0       	ldi	r24, 0x01	; 1
 53a:	0e 94 7e 01 	call	0x2fc	; 0x2fc <SEND_CMD>
					LCD_PRINT("system is on");
 53e:	8e e9       	ldi	r24, 0x9E	; 158
 540:	90 e0       	ldi	r25, 0x00	; 0
 542:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <LCD_PRINT>
					MOVING_CURSOR(1,0);
 546:	60 e0       	ldi	r22, 0x00	; 0
 548:	81 e0       	ldi	r24, 0x01	; 1
 54a:	0e 94 d6 01 	call	0x3ac	; 0x3ac <MOVING_CURSOR>
					LCD_PRINT(string2);
 54e:	ce 01       	movw	r24, r28
 550:	01 96       	adiw	r24, 0x01	; 1
 552:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <LCD_PRINT>
					flag=1;
 556:	ff 24       	eor	r15, r15
 558:	f3 94       	inc	r15
					SEND_DATA('*');
					string2[x++]=key_entered;
				}
				else
				{
					y=0;
 55a:	00 e0       	ldi	r16, 0x00	; 0
					x=0;
 55c:	e1 2c       	mov	r14, r1
					_delay_ms(1000);
					SEND_CMD(0x01);
					LCD_PRINT("system is on");
					MOVING_CURSOR(1,0);
					LCD_PRINT(string2);
					flag=1;
 55e:	29 c0       	rjmp	.+82     	; 0x5b2 <__LOCK_REGION_LENGTH__+0x1b2>
					}
					else{
						SEND_CMD(0x01);
 560:	81 e0       	ldi	r24, 0x01	; 1
 562:	0e 94 7e 01 	call	0x2fc	; 0x2fc <SEND_CMD>
						MOVING_CURSOR(0,0);
 566:	60 e0       	ldi	r22, 0x00	; 0
 568:	80 e0       	ldi	r24, 0x00	; 0
 56a:	0e 94 d6 01 	call	0x3ac	; 0x3ac <MOVING_CURSOR>
						LCD_PRINT("pass incorrect");
 56e:	8b ea       	ldi	r24, 0xAB	; 171
 570:	90 e0       	ldi	r25, 0x00	; 0
 572:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <LCD_PRINT>
						MOVING_CURSOR(1,0);
 576:	60 e0       	ldi	r22, 0x00	; 0
 578:	81 e0       	ldi	r24, 0x01	; 1
 57a:	0e 94 d6 01 	call	0x3ac	; 0x3ac <MOVING_CURSOR>
						LCD_PRINT(string2);
 57e:	ce 01       	movw	r24, r28
 580:	01 96       	adiw	r24, 0x01	; 1
 582:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <LCD_PRINT>
 586:	2f ef       	ldi	r18, 0xFF	; 255
 588:	83 ed       	ldi	r24, 0xD3	; 211
 58a:	90 e3       	ldi	r25, 0x30	; 48
 58c:	21 50       	subi	r18, 0x01	; 1
 58e:	80 40       	sbci	r24, 0x00	; 0
 590:	90 40       	sbci	r25, 0x00	; 0
 592:	e1 f7       	brne	.-8      	; 0x58c <__LOCK_REGION_LENGTH__+0x18c>
 594:	00 c0       	rjmp	.+0      	; 0x596 <__LOCK_REGION_LENGTH__+0x196>
 596:	00 00       	nop
						_delay_ms(1000);
						SEND_CMD(0x01);
 598:	81 e0       	ldi	r24, 0x01	; 1
 59a:	0e 94 7e 01 	call	0x2fc	; 0x2fc <SEND_CMD>
						LCD_PRINT("enter password:");
 59e:	8e e7       	ldi	r24, 0x7E	; 126
 5a0:	90 e0       	ldi	r25, 0x00	; 0
 5a2:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <LCD_PRINT>
						MOVING_CURSOR(1,0);
 5a6:	60 e0       	ldi	r22, 0x00	; 0
 5a8:	81 e0       	ldi	r24, 0x01	; 1
 5aa:	0e 94 d6 01 	call	0x3ac	; 0x3ac <MOVING_CURSOR>
					SEND_DATA('*');
					string2[x++]=key_entered;
				}
				else
				{
					y=0;
 5ae:	00 e0       	ldi	r16, 0x00	; 0
					x=0;
 5b0:	e1 2c       	mov	r14, r1
	  uint8 x=0;
	  uint8 y=0;
	  uint8 flag=0;
    while (1) 
    {
		while(flag==0){
 5b2:	ff 20       	and	r15, r15
 5b4:	09 f4       	brne	.+2      	; 0x5b8 <__LOCK_REGION_LENGTH__+0x1b8>
 5b6:	78 cf       	rjmp	.-272    	; 0x4a8 <__LOCK_REGION_LENGTH__+0xa8>
			}
			else{
				//no thing
			}
		}
		SIT_BIT(PORTD,DIO_PIN1);
 5b8:	91 9a       	sbi	0x12, 1	; 18
		data=SPI_U8SlAVE_RECIEVER();
 5ba:	0e 94 77 03 	call	0x6ee	; 0x6ee <SPI_U8SlAVE_RECIEVER>
         
		switch(data){
 5be:	82 33       	cpi	r24, 0x32	; 50
 5c0:	69 f1       	breq	.+90     	; 0x61c <__LOCK_REGION_LENGTH__+0x21c>
 5c2:	18 f4       	brcc	.+6      	; 0x5ca <__LOCK_REGION_LENGTH__+0x1ca>
 5c4:	81 33       	cpi	r24, 0x31	; 49
 5c6:	41 f0       	breq	.+16     	; 0x5d8 <__LOCK_REGION_LENGTH__+0x1d8>
 5c8:	f4 cf       	rjmp	.-24     	; 0x5b2 <__LOCK_REGION_LENGTH__+0x1b2>
 5ca:	83 33       	cpi	r24, 0x33	; 51
 5cc:	09 f4       	brne	.+2      	; 0x5d0 <__LOCK_REGION_LENGTH__+0x1d0>
 5ce:	48 c0       	rjmp	.+144    	; 0x660 <__LOCK_REGION_LENGTH__+0x260>
 5d0:	84 33       	cpi	r24, 0x34	; 52
 5d2:	09 f4       	brne	.+2      	; 0x5d6 <__LOCK_REGION_LENGTH__+0x1d6>
 5d4:	67 c0       	rjmp	.+206    	; 0x6a4 <__LOCK_REGION_LENGTH__+0x2a4>
 5d6:	ed cf       	rjmp	.-38     	; 0x5b2 <__LOCK_REGION_LENGTH__+0x1b2>
			case '1':
			TOGGLE_BIT(PORTD,DIO_PIN4);
 5d8:	82 b3       	in	r24, 0x12	; 18
 5da:	8d 25       	eor	r24, r13
 5dc:	82 bb       	out	0x12, r24	; 18
			SEND_CMD(0x01);
 5de:	81 e0       	ldi	r24, 0x01	; 1
 5e0:	0e 94 7e 01 	call	0x2fc	; 0x2fc <SEND_CMD>
			val=READ_BIT(PORTD,DIO_PIN4);
			if(val==1){
 5e4:	94 9b       	sbis	0x12, 4	; 18
 5e6:	0d c0       	rjmp	.+26     	; 0x602 <__LOCK_REGION_LENGTH__+0x202>
				LCD_PRINT("last action:");
 5e8:	8a eb       	ldi	r24, 0xBA	; 186
 5ea:	90 e0       	ldi	r25, 0x00	; 0
 5ec:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <LCD_PRINT>
				MOVING_CURSOR(1,0);
 5f0:	60 e0       	ldi	r22, 0x00	; 0
 5f2:	81 e0       	ldi	r24, 0x01	; 1
 5f4:	0e 94 d6 01 	call	0x3ac	; 0x3ac <MOVING_CURSOR>
				LCD_PRINT(string3);
 5f8:	87 ec       	ldi	r24, 0xC7	; 199
 5fa:	90 e0       	ldi	r25, 0x00	; 0
 5fc:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <LCD_PRINT>
 600:	d8 cf       	rjmp	.-80     	; 0x5b2 <__LOCK_REGION_LENGTH__+0x1b2>
			}
			else
			{
		    LCD_PRINT("last action:");
 602:	8a eb       	ldi	r24, 0xBA	; 186
 604:	90 e0       	ldi	r25, 0x00	; 0
 606:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <LCD_PRINT>
		    MOVING_CURSOR(1,0);
 60a:	60 e0       	ldi	r22, 0x00	; 0
 60c:	81 e0       	ldi	r24, 0x01	; 1
 60e:	0e 94 d6 01 	call	0x3ac	; 0x3ac <MOVING_CURSOR>
			LCD_PRINT(string7);	
 612:	86 ed       	ldi	r24, 0xD6	; 214
 614:	90 e0       	ldi	r25, 0x00	; 0
 616:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <LCD_PRINT>
 61a:	cb cf       	rjmp	.-106    	; 0x5b2 <__LOCK_REGION_LENGTH__+0x1b2>
			}
			break;
			case '2':
			TOGGLE_BIT(PORTD,DIO_PIN5);
 61c:	82 b3       	in	r24, 0x12	; 18
 61e:	8b 25       	eor	r24, r11
 620:	82 bb       	out	0x12, r24	; 18
			SEND_CMD(0x01);
 622:	81 e0       	ldi	r24, 0x01	; 1
 624:	0e 94 7e 01 	call	0x2fc	; 0x2fc <SEND_CMD>
			val=READ_BIT(PORTD,DIO_PIN5);
			if(val==1){
 628:	95 9b       	sbis	0x12, 5	; 18
 62a:	0d c0       	rjmp	.+26     	; 0x646 <__LOCK_REGION_LENGTH__+0x246>
				LCD_PRINT("last action:");
 62c:	8a eb       	ldi	r24, 0xBA	; 186
 62e:	90 e0       	ldi	r25, 0x00	; 0
 630:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <LCD_PRINT>
				MOVING_CURSOR(1,0);
 634:	60 e0       	ldi	r22, 0x00	; 0
 636:	81 e0       	ldi	r24, 0x01	; 1
 638:	0e 94 d6 01 	call	0x3ac	; 0x3ac <MOVING_CURSOR>
				LCD_PRINT(string4);
 63c:	86 ee       	ldi	r24, 0xE6	; 230
 63e:	90 e0       	ldi	r25, 0x00	; 0
 640:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <LCD_PRINT>
 644:	b6 cf       	rjmp	.-148    	; 0x5b2 <__LOCK_REGION_LENGTH__+0x1b2>
			}
			else
			{
				LCD_PRINT("last action:");
 646:	8a eb       	ldi	r24, 0xBA	; 186
 648:	90 e0       	ldi	r25, 0x00	; 0
 64a:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <LCD_PRINT>
				MOVING_CURSOR(1,0);
 64e:	60 e0       	ldi	r22, 0x00	; 0
 650:	81 e0       	ldi	r24, 0x01	; 1
 652:	0e 94 d6 01 	call	0x3ac	; 0x3ac <MOVING_CURSOR>
				LCD_PRINT(string8);
 656:	85 ef       	ldi	r24, 0xF5	; 245
 658:	90 e0       	ldi	r25, 0x00	; 0
 65a:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <LCD_PRINT>
 65e:	a9 cf       	rjmp	.-174    	; 0x5b2 <__LOCK_REGION_LENGTH__+0x1b2>
			}
			break;
			case '3':
			TOGGLE_BIT(PORTD,DIO_PIN6);
 660:	82 b3       	in	r24, 0x12	; 18
 662:	8c 25       	eor	r24, r12
 664:	82 bb       	out	0x12, r24	; 18
			SEND_CMD(0x01);
 666:	81 e0       	ldi	r24, 0x01	; 1
 668:	0e 94 7e 01 	call	0x2fc	; 0x2fc <SEND_CMD>
			val=READ_BIT(PORTD,DIO_PIN6);
			if(val==1){
 66c:	96 9b       	sbis	0x12, 6	; 18
 66e:	0d c0       	rjmp	.+26     	; 0x68a <__LOCK_REGION_LENGTH__+0x28a>
				LCD_PRINT("last action:");
 670:	8a eb       	ldi	r24, 0xBA	; 186
 672:	90 e0       	ldi	r25, 0x00	; 0
 674:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <LCD_PRINT>
				MOVING_CURSOR(1,0);
 678:	60 e0       	ldi	r22, 0x00	; 0
 67a:	81 e0       	ldi	r24, 0x01	; 1
 67c:	0e 94 d6 01 	call	0x3ac	; 0x3ac <MOVING_CURSOR>
				LCD_PRINT(string5);
 680:	85 e0       	ldi	r24, 0x05	; 5
 682:	91 e0       	ldi	r25, 0x01	; 1
 684:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <LCD_PRINT>
 688:	94 cf       	rjmp	.-216    	; 0x5b2 <__LOCK_REGION_LENGTH__+0x1b2>
			}
			else
			{
				LCD_PRINT("last action:");
 68a:	8a eb       	ldi	r24, 0xBA	; 186
 68c:	90 e0       	ldi	r25, 0x00	; 0
 68e:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <LCD_PRINT>
				MOVING_CURSOR(1,0);
 692:	60 e0       	ldi	r22, 0x00	; 0
 694:	81 e0       	ldi	r24, 0x01	; 1
 696:	0e 94 d6 01 	call	0x3ac	; 0x3ac <MOVING_CURSOR>
				LCD_PRINT(string9);
 69a:	84 e1       	ldi	r24, 0x14	; 20
 69c:	91 e0       	ldi	r25, 0x01	; 1
 69e:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <LCD_PRINT>
 6a2:	87 cf       	rjmp	.-242    	; 0x5b2 <__LOCK_REGION_LENGTH__+0x1b2>
			}
			break;
			case '4':
			TOGGLE_BIT(PORTD,DIO_PIN7);
 6a4:	82 b3       	in	r24, 0x12	; 18
 6a6:	80 58       	subi	r24, 0x80	; 128
 6a8:	82 bb       	out	0x12, r24	; 18
			SEND_CMD(0x01);
 6aa:	81 e0       	ldi	r24, 0x01	; 1
 6ac:	0e 94 7e 01 	call	0x2fc	; 0x2fc <SEND_CMD>
			val=READ_BIT(PORTD,DIO_PIN7);
			if(val==1){
 6b0:	97 9b       	sbis	0x12, 7	; 18
 6b2:	0d c0       	rjmp	.+26     	; 0x6ce <__LOCK_REGION_LENGTH__+0x2ce>
				LCD_PRINT("last action:");
 6b4:	8a eb       	ldi	r24, 0xBA	; 186
 6b6:	90 e0       	ldi	r25, 0x00	; 0
 6b8:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <LCD_PRINT>
				MOVING_CURSOR(1,0);
 6bc:	60 e0       	ldi	r22, 0x00	; 0
 6be:	81 e0       	ldi	r24, 0x01	; 1
 6c0:	0e 94 d6 01 	call	0x3ac	; 0x3ac <MOVING_CURSOR>
				LCD_PRINT(string6);
 6c4:	84 e2       	ldi	r24, 0x24	; 36
 6c6:	91 e0       	ldi	r25, 0x01	; 1
 6c8:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <LCD_PRINT>
 6cc:	72 cf       	rjmp	.-284    	; 0x5b2 <__LOCK_REGION_LENGTH__+0x1b2>
			}
			else
			{
				LCD_PRINT("last action:");
 6ce:	8a eb       	ldi	r24, 0xBA	; 186
 6d0:	90 e0       	ldi	r25, 0x00	; 0
 6d2:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <LCD_PRINT>
				MOVING_CURSOR(1,0);
 6d6:	60 e0       	ldi	r22, 0x00	; 0
 6d8:	81 e0       	ldi	r24, 0x01	; 1
 6da:	0e 94 d6 01 	call	0x3ac	; 0x3ac <MOVING_CURSOR>
				LCD_PRINT(string10);
 6de:	83 e3       	ldi	r24, 0x33	; 51
 6e0:	91 e0       	ldi	r25, 0x01	; 1
 6e2:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <LCD_PRINT>
 6e6:	65 cf       	rjmp	.-310    	; 0x5b2 <__LOCK_REGION_LENGTH__+0x1b2>

000006e8 <SPI_INIT_SLAVE>:
#define SCK 7
void SPI_INIT_SLAVE(void)
{
//set as slave by set mstr to 0
//enable spi
SIT_BIT(SPCR,SPE);
 6e8:	6e 9a       	sbi	0x0d, 6	; 13
//set miso as input	
DDRB|=(1<<MISO);
 6ea:	be 9a       	sbi	0x17, 6	; 23
 6ec:	08 95       	ret

000006ee <SPI_U8SlAVE_RECIEVER>:
}
char SPI_U8SlAVE_RECIEVER(void){
	//check transmission is finished
	
	while(!(SPSR&(1<<SPIF)))
 6ee:	77 9b       	sbis	0x0e, 7	; 14
 6f0:	fe cf       	rjmp	.-4      	; 0x6ee <SPI_U8SlAVE_RECIEVER>
	{
		//do nothing
	}
	return SPDR;
 6f2:	8f b1       	in	r24, 0x0f	; 15
}
 6f4:	08 95       	ret

000006f6 <_exit>:
 6f6:	f8 94       	cli

000006f8 <__stop_program>:
 6f8:	ff cf       	rjmp	.-2      	; 0x6f8 <__stop_program>
